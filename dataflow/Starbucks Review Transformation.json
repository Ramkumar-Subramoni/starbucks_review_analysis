{
	"name": "Starbucks Review Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Starbucks_reviews",
						"type": "DatasetReference"
					},
					"name": "BlobSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "TransformedResults"
				}
			],
			"transformations": [
				{
					"name": "AddingReviewNatureColumn"
				},
				{
					"name": "DateSplit"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          location as string,",
				"          Date as date,",
				"          Rating as double,",
				"          Review as string,",
				"          City as string,",
				"          State as string,",
				"          GeneratedSentiment as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BlobSource",
				"BlobSource derive(ReviewNatureFromRating = iif(Rating > 3, 'Positive', iif(Rating < 3, 'Negative', 'Neutral'))) ~> AddingReviewNatureColumn",
				"AddingReviewNatureColumn derive(Day = iif(dayOfWeek(Date) == 1, 'Monday',\r",
				" iif(dayOfWeek(Date) == 2, 'Tuesday',\r",
				"  iif(dayOfWeek(Date) == 3, 'Wednesday',\r",
				"   iif(dayOfWeek(Date) == 4, 'Thursday',\r",
				"    iif(dayOfWeek(Date) == 5, 'Friday',\r",
				"     iif(dayOfWeek(Date) == 6, 'Saturday',\r",
				"      iif(dayOfWeek(Date) == 7, 'Sunday', ''))))))),",
				"          Month = month(Date),",
				"          Year = year(Date)) ~> DateSplit",
				"DateSplit select(mapColumn(",
				"          Date,",
				"          Review,",
				"          City,",
				"          State,",
				"          ReviewNature = ReviewNatureFromRating,",
				"          Day,",
				"          Month,",
				"          Year,",
				"          GeneratedSentiment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns alterRow(upsertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TransformedResults"
			]
		}
	}
}